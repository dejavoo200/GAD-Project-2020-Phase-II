LAB

Google Cloud Fundamentals: Getting Started with GKE
Objectives
In this lab, you learn how to perform the following tasks:

- Provision a Kubernetes cluster using Kubernetes Engine.

- Deploy and manage Docker containers using kubectl.
Steps:
Confirm that needed APIs are enabled:

- Get a list of services that you can enable in your project:

    gcloud services list --available
- If you don't see the API listed, that means you haven't been granted access to enable the API.

API	SERVICE_NAME
Kubernetes API	container.googleapis.com
Container Registry API	containerregistry.googleapis.com
- Using the applicable service name from the previous step, enable the service:

    gcloud services enable SERVICE_NAME
Start a Kubernetes Engine cluster

For convenience, place the zone that Qwiklabs assigned you to into an environment variable called MY_ZONE:

    export MY_ZONE=<assigned zone>
Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes:

    gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2
After the cluster is created, check your installed version of Kubernetes using the kubectl version command:

    kubectl version
- The gcloud container clusters create command automatically authenticated kubectl for you.

View your running nodes:

    gcloud compute instances list
Run and deploy a container:

Launch a single instance of the nginx container. (Nginx is a popular web server):
    kubectl create deploy nginx --image=nginx:1.17.10
- Note: If you see any deprecation warning about future version you can simply ignore it for now and can proceed further.

View the pod running the nginx container:
    kubectl get pods
Expose the nginx container to the Internet:
    kubectl expose deployment nginx --port 80 --type LoadBalancer
View the pod running the nginx container:
    kubectl get pods
Open a new web browser tab and paste your cluster's external IP address into the address bar. The default home page of the Nginx browser is displayed.

Scale up the number of pods running on your service:

    kubectl scale deployment nginx --replicas 3
Confirm that Kubernetes has updated the number of pods:
    kubectl get pods
Confirm that your external IP address has not changed:
    kubectl get services
Return to the web browser tab in which you viewed your cluster's external IP address. Refresh the page to confirm that the nginx web server is still responding.